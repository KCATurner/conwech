version: 2.1

jobs:

  check-python:
    docker:
      - image: python:latest
    steps:
      - run:
          name: "Check Pip and Python versions"
          command: |
            pip3 --version
            python3 --version

  unit-testing:
    docker:
      - image: python:latest
    steps:
      - checkout
      - run:
          name: "Update pytest packages"
          command: |
            pip3 install pytest
            pip3 install pytest-cov
            pip3 install pytest-circleci
      - run:
          name: "Install conwech package"
          command: |
            pip3 install . --verbose
      - run:
          name: "Run conwech unit tests"
          command: |
            pytest tests --junitxml="tests/reports/results.xml"
      - store_test_results:
          path: tests/reports

  push-dev-tag:
    docker:
      - image: python:latest
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:30:b4:68:a8:21:16:35:b1:81:90:5f:39:56:32:1b"
      - checkout
      - run:
          name: "Deduce next appropriate version tag"
          command: |
            set -x
            echo 'export month=$(date +%Y.%m)' >> $BASH_ENV
            echo 'export latest=$(git describe --tags --abbrev=0)' >> $BASH_ENV
            echo 'export branch=$(git rev-parse --abbrev-ref HEAD)' >> $BASH_ENV
            echo 'export type=$(if [[ $branch == master ]]; then echo rc; else echo .dev; fi)' >> $BASH_ENV
            echo 'export next=$(expr $(echo $latest | grep -oP "(?<=^v${month}${type})\d+$") + 1)' >> $BASH_ENV
            echo 'export version="v${month}${type}${next}"' >> $BASH_ENV
      - run:
          name: "Create new tag and push to GitHub"
          command: |
            set -x
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git tag $version
            git push origin $version

  publish-docs:
    docker:
      - image: python:latest
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:30:b4:68:a8:21:16:35:b1:81:90:5f:39:56:32:1b"
      - checkout
      - run:
          name: "Install sphinx packages"
          command: |
            pip3 install sphinx>=3
            pip3 install sphinx-rtd-theme
            pip3 install sphinxcontrib-autoprogram
      - run:
          name: "Install conwech package"
          command: |
            pip3 install . --verbose
      - run:
          name: "Export custom environment variables"
          command: |
            echo 'export latest=$(git describe --tags --abbrev=0)' >> $BASH_ENV
            echo 'export branch=$(git rev-parse --abbrev-ref HEAD)' >> $BASH_ENV
            echo 'export version=$(echo $latest | grep -oP "^v\d+\.\d+")' >> $BASH_ENV
      - run:
          name: "Build static HTML documentation"
          command: |
            set -x
            sphinx-build -aETb html docs/source docs/latest -D version=latest -D release=latest
            sphinx-build -aETb html docs/source docs/$version -D version=$version -D release=$latest
      - run:
          name: "Push documentation to gh-pages"
          command: |
            git config --global user.email $GH_EMAIL
            git config --global user.name $GH_NAME
            git add --force docs
            git stash
            git pull origin gh-pages --no-commit
            git checkout stash -- .
            git commit --message="[skip ci] documentation build."
            git push --force origin $branch:gh-pages

  build-deploy:
    docker:
      - image: python:latest
    steps:
      - add_ssh_keys:
          fingerprints:
            - "4a:30:b4:68:a8:21:16:35:b1:81:90:5f:39:56:32:1b"
      - checkout
      - run:
          name: "Install twine package"
          command: |
            pip3 install twine
      - run:
          name: "Export custom environment variables"
          command: |
            echo 'export version=$(date +%Y.%m -d "$(date +%Y-%m-01)-1 day")' >> $BASH_ENV
            echo 'export latest=$(git describe --tags --abbrev=0)' >> $BASH_ENV
            echo 'export match=$(echo $latest | grep -oP "(?<=^v)\d+\.\d+(?=rc\d+$)")' >> $BASH_ENV
      - run:
          name: "Build release and upload to PyPI"
          command: |
            set -x
            if [[ $match == $version ]];
            then
              git tag $version;
              git push origin $version;
              python3 setup.py sdist;
              python3 setup.py bdist_wheel;
              twine upload dist/* -u $PYPI_USERNAME -p $PYPI_PASSWORD;
            else
              echo "No new release candidate to deploy.";
            fi

workflows:
  version: 2

  develop:
    jobs:
      - check-python
      - unit-testing:
          filters:
            branches:
              ignore:
                - gh-pages
      - push-dev-tag:
          requires:
            - unit-testing
          filters:
            branches:
              only:
                - develop
                - master
      - publish-docs:
          requires:
            - unit-testing
            - push-dev-tag
          filters:
            branches:
              only:
                - develop
                - master

  release:
    triggers:
      - schedule:
          cron: "0 0 1 * *"
          filters:
            branches:
              only: master
    jobs:
      - check-python
      - unit-testing
      - build-deploy:
          requires:
            - unit-testing
      - publish-docs:
          requires:
            - unit-testing
            - build-deploy
