# Configuration file for the Sphinx documentation builder.
#
# This file only contains a selection of the most common options. For a full
# list see the documentation:
# https://www.sphinx-doc.org/en/master/usage/configuration.html

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.

import os
import sys
import datetime
sys.path.insert(0, os.path.abspath('../..'))
sys.path.insert(0, os.path.abspath('../../conwech'))


# -- Project information -----------------------------------------------------

project = 'ConWech'
copyright = '2020, Kevin Turner'
author = 'Kevin Turner'
now = datetime.datetime.now()

# The short X.Y version
version = now.strftime('%Y.%m')

# The full version, including alpha/beta/rc tags
release = now.strftime('%Y.%m')


# -- General configuration ---------------------------------------------------

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom ones.
extensions = [
    'sphinx.ext.napoleon',
    'sphinx.ext.autodoc',
    'sphinx.ext.todo',
    'sphinx.ext.viewcode',
    'sphinx.ext.githubpages',
    'sphinx.ext.autosummary',
    'sphinxcontrib.autoprogram',
    'sphinx_rtd_theme',
]

# The file extensions of source files. Sphinx considers the files with this
# suffix as sources. This value can be a dictionary mapping file extensions
# to file types. For example:
#
#     source_suffix = {
#         '.rst': 'restructuredtext',
#         '.txt': 'restructuredtext',
#         '.md': 'markdown',
#     }
#
# By default, Sphinx only supports 'restrcturedtext' file type. You can add a
# new file type using source parser extensions. Please read a document of the
# extension to know what file type the extension supports. This also allows a
# list of file extensions. In that case, Sphinx considers that all they are
# 'restructuredtext'. Default is {'.rst': 'restructuredtext'}.
source_suffix = {
    '.rst': 'restructuredtext',
    '.txt': 'restructuredtext',
    '.md': 'markdown',
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = 'en'

# A list of glob-style patterns that should be excluded when looking for
# source files. They are matched against the source file names relative to the
# source directory, using slashes as directory separators on all platforms.
#
# Example patterns:
#   'library/xml.rst' – ignores the library/xml.rst file (replaces entry in
#       unused_docs)
#   'library/xml' – ignores the library/xml directory
#   'library/xml*' – ignores all files and directories starting with
#       library/xml
#   '**/.svn' – ignores all .svn directories
#
# exclude_patterns is also consulted when looking for static files in
# html_static_path and html_extra_path.
exclude_patterns = []

# A boolean that decides whether module names are prepended to all object
# names (for object types where a “module” of some kind is defined),
# e.g. for py:function directives. Default is True.
add_module_names = False

# A list of prefixes that are ignored for sorting the Python module index
# (e.g., if this is set to ['foo.'], then foo.bar is shown under B, not F).
# This can be handy if you document a project that consists of a single
# package. Works only for the HTML builder currently. Default is [].
modindex_common_prefix = ['conwech.', ]


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages. See the documentation for a
# list of builtin themes.
html_theme = 'sphinx_rtd_theme'

# A dictionary of options that influence the look and feel of the selected
# theme. These are theme-specific.
html_theme_options = {
    'prev_next_buttons_location': 'both'
}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# If this is not None, a ‘Last updated on:’ timestamp is inserted at every
# page bottom, using the given strftime() format. The empty string is
# equivalent to '%b %d, %Y' (or a locale-dependent equivalent).
html_last_updated_fmt = '%b %d, %Y'

# Suffix to be appended to source links (see html_show_sourcelink), unless
# they have this suffix already. Default is '.txt'.
html_sourcelink_suffix = '.rst'


# -- Extension configuration -------------------------------------------------

todo_include_todos = True
autosummary_generate = True
autosummary_generate_overwrite = True
autoclass_content = 'both'
autodoc_module_first = True
autodoc_typehints = 'signature'
autodoc_default_options = {
    'members': True,
    'member-order': 'bysource',
}


def setup(app):
    # for wrapping long table cells.
    app.add_css_file('custom.css')
